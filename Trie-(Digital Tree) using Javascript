let Alphabet_SIZE = 26;
class TrieNode
{
    constructor()
    {
        this.isEndOfWord = false;
        this.children = new Array(Alphabet_SIZE);
        for (let i = 0; i < Alphabet_SIZE; i++)
            this.children[i] = null;
    }
} 
let Root;
function insert(key)
{
    let level;
        let length = key.length;
        let Index;       
        let pCrawl = Root;       
        for (level = 0; level < length; level++)
        {
            Index = key[level].charCodeAt(0) - 'a'.charCodeAt(0);
            if (pCrawl.children[Index] == null)
                pCrawl.children[Index] = new TrieNode();
            pCrawl = pCrawl.children[Index];
        }
        pCrawl.isEndOfWord = true;
}
function search(key)
{
    let level;
        let length = key.length;
        let Index;
        let pCrawl = Root;      
        for (level = 0; level < length; level++)
        {
            Index = key[level].charCodeAt(0) - 'a'.charCodeAt(0);  
            if (pCrawl.children[Index] == null)
                return false;
            pCrawl = pCrawl.children[Index];
        }      
        return (pCrawl.isEndOfWord);
} 
let keys = ["them","an" ,"a","therefor", "there", "answer", "any","by", "bye", "their"];
let answer = ["Not present in trie list", "Present in trie list"]; 
Root = new TrieNode();
let i;
for (i = 0; i < keys.length ; i++)
    insert(keys[i]);
if(search("the") == true)
    console.log("the --- " + answer[1]);
else
    console.log("the --- " + answer[0]);
if(search("these") == true)
    console.log("these --- " + answer[1]);
else
    console.log("these --- " + answer[0]);
if(search("their") == true)
    console.log("their --- " + answer[1]);
else
    console.log("their --- " + answer[0]);
if(search("thaw") == true)
    console.log("thaw --- " + answer[1]);
else
    console.log("thaw --- " + answer[0]);
if(search("them") == true)
    console.log("them --- " + answer[1]);
else
    console.log("them --- " + answer[0]);
//Output--
//the --- Not present in trie list
//these --- Not present in trie list
//their --- Present in trie list
//thaw --- Not present in trie list
//them --- Present in trie list 
 
