//trie/Digital Tree 
#include <iostream>
#include <string.h>
#define Alpha_size 26
#define ARRAY_SIZE(a) sizeof(a) / sizeof(a[0])
using namespace std;
struct TrieNode
{
    struct TrieNode* Children[Alpha_size];
    bool Leaf;
};
struct TrieNode* createNode()
{
    struct TrieNode* Node = new TrieNode;
    for (int i = 0; i < Alpha_size; i++)
        Node->Children[i] = NULL;
    Node->Leaf = false;
    return Node;
};
void insert_node(struct TrieNode* root, char* key)
{
    int level;
    int length = strlen(key);
    struct TrieNode* Crawl = root;
    for (level = 0; level < length; level++)
    {
        int index = key[level] - 'a';
        if (Crawl->Children[index] == NULL)
            Crawl->Children[index] = createNode();
        Crawl = Crawl->Children[index];
    }
    Crawl->Leaf = true;
}
bool LeafNode(struct TrieNode* root)
{
    return root->Leaf != false;
}
void display(struct TrieNode* root, char str[], int level)
{
    if (LeafNode(root))
    {
        str[level] = '\0';
        cout << str << endl;
    }
    int i;
    for (i = 0; i < Alpha_size; i++)
    {
        if (root->Children[i])
        {
            str[level] = i + 'a';
            display(root->Children[i], str, level + 1);
        }
    }
}
int main()
{
    char keys[][8] = { "the", "a", "there", "answer", "any", "by", "bye", "their" };
    struct TrieNode* root = createNode();
    for (int j = 0; j < ARRAY_SIZE(keys); j++)
        insert_node(root, keys[j]);
    int level = 0;
    char str[20];
    cout << "Here is content of Trie:" << endl;
    display(root, str, level);
}
//Output-
//Here is content if Trie:
//a 
//answer
//any 
//by
//bye
//the
//their
//there
    /*  root
                    /   \    \
                    t   a     b
                    |   |     |
                    h   n     y
                    |   |  \  |
                    e   s  y  e
                 /  |   |
                 i  r   w
                 |  |   |
                 r  e   e
                        |
                        r    */
